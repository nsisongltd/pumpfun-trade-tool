// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  walletAddress String    @unique
  orders        Order[]
  trades        Trade[]
  alerts        Alert[]
  apiKeys       ApiKey[]
}

model Order {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  marketAddress String
  side          String    // 'buy' | 'sell'
  price         Decimal
  size          Decimal
  remainingSize Decimal
  status        String    // 'open' | 'filled' | 'cancelled'
  type          String    // 'limit' | 'market'
  trades        Trade[]

  @@index([userId])
  @@index([marketAddress])
}

model Trade {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  orderId       String
  order         Order     @relation(fields: [orderId], references: [id])
  marketAddress String
  side          String    // 'buy' | 'sell'
  price         Decimal
  size          Decimal
  fee           Decimal

  @@index([userId])
  @@index([orderId])
  @@index([marketAddress])
}

model Alert {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  tokenAddress String
  condition    String    // 'above' | 'below'
  price        Decimal
  triggered    Boolean   @default(false)

  @@index([userId])
  @@index([tokenAddress])
}

model ApiKey {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  key       String    @unique
  name      String
  active    Boolean   @default(true)

  @@index([userId])
} 